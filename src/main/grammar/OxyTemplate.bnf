{
    parserClass="ool.intellij.plugin.lang.parser.OxyTemplateParser"

    extends="ool.intellij.plugin.psi.impl.OxyTemplatePsiElementImpl"
    implements="ool.intellij.plugin.psi.OxyTemplatePsiElement"

    psiImplClassSuffix="Impl"
    psiPackage="ool.intellij.plugin.psi"
    psiImplPackage="ool.intellij.plugin.psi.impl"

    elementTypeHolderClass="ool.intellij.plugin.psi.OxyTemplateTypes"
    elementTypeClass="ool.intellij.plugin.psi.OxyTemplateElementType"
    tokenTypeClass="ool.intellij.plugin.psi.OxyTemplateTokenType"
    psiImplUtilClass="ool.intellij.plugin.psi.impl.OxyTemplatePsiUtil"
    psiVisitorName="OxyTemplateElementVisitor"

    extends("macro_empty_tag|macro_tag")="ool.intellij.plugin.psi.impl.MacroCallImpl"
    implements("macro_empty_tag|macro_tag")="ool.intellij.plugin.psi.MacroCall"
}

oxyTemplate ::= item_*

private item_ ::= (block_statement|block_open_statement|block_close_statement|
    directive_statement|directive_param_wrapper|directive_param_file_reference|directive_open_statement|
    macro_tag|macro_empty_tag|macro_xml_prefix|macro_attribute|macro_name|
    macro_param|macro_param_name|macro_expression_param|
    T_TEMPLATE_HTML_CODE|T_TEMPLATE_JAVASCRIPT_CODE|T_INNER_TEMPLATE_ELEMENT|T_OUTER_TEMPLATE_ELEMENT|T_BLOCK_COMMENT
    T_OPEN_BLOCK_MARKER|T_OPEN_BLOCK_MARKER_PRINT|T_OPEN_BLOCK_MARKER_DIRECTIVE|T_CLOSE_BLOCK_MARKER|
    T_DIRECTIVE|T_DIRECTIVE_PARAM|T_DIRECTIVE_PARAM_BOUNDARY|
    T_XML_TAG_START|T_XML_OPEN_TAG_END|T_XML_CLOSE_TAG_START|T_XML_CLOSE_TAG_END|T_XML_EMPTY_TAG_END|T_XML_NAMESPACE_DELIMITER|
    T_MACRO_XML_NAMESPACE|T_MACRO_NAME|T_XML_ENCODED_ENTITY|
    T_MACRO_PARAM_NAME|T_MACRO_PARAM_ASSIGNMENT|T_MACRO_PARAM_BOUNDARY|T_MACRO_PARAM|T_MACRO_PARAM_EXPRESSION_STATEMENT)

private block_statement ::= block_open_statement T_TEMPLATE_JAVASCRIPT_CODE* block_close_statement{pin=2}
directive_statement ::= directive_open_statement T_DIRECTIVE directive_param_wrapper+ block_close_statement{pin=2 methods=[getName]}
macro_empty_tag ::= T_XML_TAG_START macro_xml_prefix macro_name macro_attribute* T_XML_EMPTY_TAG_END{pin=3}
macro_tag ::= T_XML_TAG_START macro_xml_prefix macro_name macro_attribute* T_XML_OPEN_TAG_END
    (macro_tag | macro_empty_tag | block_statement | directive_statement | T_TEMPLATE_HTML_CODE)* T_XML_CLOSE_TAG_START macro_xml_prefix macro_name T_XML_CLOSE_TAG_END
        {pin=5 methods=[macroName="/macro_name[first]" getContentRange]}

block_open_statement ::= T_OPEN_BLOCK_MARKER | T_OPEN_BLOCK_MARKER_PRINT
block_close_statement ::= T_CLOSE_BLOCK_MARKER

directive_open_statement ::= T_OPEN_BLOCK_MARKER_DIRECTIVE
directive_param_wrapper ::= T_DIRECTIVE_PARAM_BOUNDARY directive_param_file_reference T_DIRECTIVE_PARAM_BOUNDARY{pin=1}
directive_param_file_reference ::= T_DIRECTIVE_PARAM {methods=[getReferences]}

macro_xml_prefix ::= T_MACRO_XML_NAMESPACE T_XML_NAMESPACE_DELIMITER
macro_name ::= T_MACRO_NAME {methods=[getReference getReferences setName getName isClosingTagMacroName]}
macro_attribute ::= macro_param_name T_MACRO_PARAM_ASSIGNMENT T_MACRO_PARAM_BOUNDARY macro_param? T_MACRO_PARAM_BOUNDARY{pin=1}
macro_param_name ::= T_MACRO_PARAM_NAME
macro_param ::= (T_MACRO_PARAM | T_XML_ENCODED_ENTITY)+ | T_TEMPLATE_JAVASCRIPT_CODE | macro_expression_param
private macro_expression_param ::= T_MACRO_PARAM_EXPRESSION_STATEMENT T_TEMPLATE_JAVASCRIPT_CODE{pin=1}
